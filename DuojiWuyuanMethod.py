import numpy as np
import pandas as pd


# 定义距离函数
def rho(x, interval):
    a, b = interval
    mid = (a + b) / 2
    return abs(x - mid) - (b - a) / 2


# 定义关联函数
def K(x, interval_j, interval_p):
    rho_j = rho(x, interval_j)
    rho_p = rho(x, interval_p)
    if rho_p - rho_j == 0:
        return 0
    return rho_j / (rho_p - rho_j)


# 经典域（根据图片更新）
classical_domains = {
    '地基承载力/kn/m²': [(0, 60), (60, 80), (80, 100), (100, 115), (115, 500)],
    '路面平整度/(mm/km)': [(5, 10), (4.3, 5.0), (3.5, 4.3), (2.3, 3.5), (0.2, 3)],
    '路面破损率': [(11, 100), (5.5, 11.0), (2.0, 5.5), (0.4, 2.0), (0, 0.4)],
    '路面结构强度系数': [(0, 0.61), (0.61, 0.69), (0.69, 0.80), (0.80, 0.95), (0.95, 1)],
    '路面车辙深度/mm': [(20, 100), (15, 20), (10, 15), (5, 10), (0, 5)],
    '路面抗滑性能指数': [(0, 60), (60, 70), (70, 80), (80, 90), (90, 100)],
    '路基高度合理性': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '路基宽度/m': [(0, 20), (20, 25), (25, 30), (30, 35), (35, 100)],
    '路基压实度/%': [(0, 93), (93, 94), (94, 95), (95, 96), (96, 100)],
    '路基回弹模量/MPa': [(0, 40), (40, 50), (50, 60), (60, 70), (70, 100)],
    '路基边坡稳定系数': [(0, 1), (1, 1.1), (1.1, 1.25), (1.25, 1.35), (1.35, 1.5)],
    '粒径级配': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '路基含水率': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '降雨量/mm': [(600, 1000), (500, 600), (400, 500), (300, 400), (0, 300)],
    '降雨强度/(mm/min)': [(140, 200), (50, 140), (15, 50), (5, 15), (0, 5)],
    '汇水面积/km²': [(0, 80), (80, 160), (160, 240), (240, 300), (300, 1000)],
    '排水管道承载能力': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '地表水排水通畅情况': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '地下水排水通畅情况': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '交通流量/(辆/天)': [(40000, 50000), (30000, 40000), (20000, 30000), (10000, 20000), (0, 10000)],
    '大、重车型比例/%': [(0, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.8), (0.8, 1.0)],
    '最大轴重/吨': [(10, 10), (10, 15), (15, 20), (20, 25), (25, 100)],
    '超限车辆比例/%': [(10, 100), (5, 10), (2, 5), (0.5, 2), (0, 0.5)],
    '车辆超载率/%': [(1, 15), (0.6, 1), (0.4, 0.6), (0.1, 0.4), (0, 0.1)],
    '冻土厚度/cm': [(400, 1000), (300, 400), (200, 300), (100, 200), (0, 100)],
    '年平均地温/℃': [(5, 100), (-0.5, 5), (-3.0, -0), (-5.0, -3.0), (-100, -5.0)],
    '冻土上限/m': [(0, 1), (1, 2), (2, 3), (3, 4), (4, 10)],
    '冻土含冰率/%': [(10, 100), (50, 60), (40, 50), (20, 40), (0, 20)],
    '冻胀率/%': [(0, 1), (1, 3.5), (3.5, 6.0), (6.0, 12.0), (12.0, 50)]
}

# 节域（根据图片更新）
section_domains = {
    '地基承载力/kn/m²': (0, 500),
    '路面平整度/(mm/km)': (0, 10),
    '路面破损率': (0, 100),
    '路面结构强度系数': (0, 1),
    '路面车辙深度/mm': (0, 100),
    '路面抗滑性能指数': (0, 100),
    '路基高度合理性': (0, 1),
    '路基宽度/m': (0, 100),
    '路基压实度/%': (0, 100),
    '路基回弹模量/MPa': (0, 100),
    '路基边坡稳定系数': (0, 1.5),
    '粒径级配': (0, 1),
    '路基含水率': (0, 1),
    '降雨量/mm': (0, 1000),
    '降雨强度/(mm/min)': (0, 200),
    '汇水面积/km²': (0, 1000),
    '排水管道承载能力': (0, 1),
    '地表水排水通畅情况': (0, 1),
    '地下水排水通畅情况': (0, 1),
    '交通流量/(辆/天)': (0, 50000),
    '大、重车型比例/%': (0, 1),
    '最大轴重/吨': (0, 100),
    '超限车辆比例/%': (0, 100),
    '车辆超载率/%': (0, 15),
    '冻土厚度/cm': (0, 1000),
    '年平均地温/℃': (-100, 100),
    '冻土上限/m': (0, 10),
    '冻土含冰率/%': (0, 100),
    '冻胀率/%': (0, 50)
}

# 待评物元（L1）
# evaluation_objects = {
#     '地基承载力/kn/m²': 100,
#     '路面平整度/(mm/km)': 2,
#     '路面破损率': 1,
#     '路面结构强度系数': 0.85,
#     '路面车辙深度/mm': 8,
#     '路面抗滑性能指数': 80,
#     '路基高度合理性': 0.78,
#     '路基宽度/m': 35,
#     '路基压实度/%': 96,
#     '路基回弹模量/MPa': 70,
#     '路基边坡稳定系数': 1.4,
#     '粒径级配': 0.85,
#     '路基含水率': 0.87,
#     '降雨量/mm': 150,
#     '降雨强度/(mm/min)': 15,
#     '汇水面积/km²': 480,
#     '排水管道承载能力': 0.87,
#     '地表水排水通畅情况': 0.8,
#     '地下水排水通畅情况': 0.8,
#     '交通流量/(辆/天)': 25000,
#     '大、重车型比例/%': 0.5,
#     '最大轴重/吨': 30,
#     '超限车辆比例/%': 3,
#     '车辆超载率/%': 3,
#     '冻土厚度/cm': 150,
#     '年平均地温/℃': 3,
#     '冻土上限/m': 0.9,
#     '冻土含冰率/%': 40,
#     '冻胀率/%': 7
# }

# 待评物元（L2）
# evaluation_objects = {
#     '地基承载力/kn/m²': 100,
#     '路面平整度/(mm/km)': 4,
#     '路面破损率': 3,
#     '路面结构强度系数': 0.7,
#     '路面车辙深度/mm': 15,
#     '路面抗滑性能指数': 70,
#     '路基高度合理性': 0.8,
#     '路基宽度/m': 30,
#     '路基压实度/%': 94,
#     '路基回弹模量/MPa': 60,
#     '路基边坡稳定系数': 1.2,
#     '粒径级配': 0.8,
#     '路基含水率': 0.81,
#     '降雨量/mm': 150,
#     '降雨强度/(mm/min)': 15,
#     '汇水面积/km²': 300,
#     '排水管道承载能力': 0.8,
#     '地表水排水通畅情况': 0.7,
#     '地下水排水通畅情况': 0.7,
#     '交通流量/(辆/天)': 25000,
#     '大、重车型比例/%': 0.5,
#     '最大轴重/吨': 30,
#     '超限车辆比例/%': 3,
#     '车辆超载率/%': 3,
#     '冻土厚度/cm': 150,
#     '年平均地温/℃': 3,
#     '冻土上限/m': 0.9,
#     '冻土含冰率/%': 40,
#     '冻胀率/%': 6
# }

#待评物元（L3）
evaluation_objects = {
    '地基承载力/kn/m²': 200,
    '路面平整度/(mm/km)': 1.5,
    '路面破损率': 0.5,
    '路面结构强度系数': 0.88,
    '路面车辙深度/mm': 5,
    '路面抗滑性能指数': 90,
    '路基高度合理性': 0.85,
    '路基宽度/m': 30,
    '路基压实度/%': 95,
    '路基回弹模量/MPa': 65,
    '路基边坡稳定系数': 1.3,
    '粒径级配': 0.6,
    '路基含水率': 0.4,
    '降雨量/mm': 150,
    '降雨强度/(mm/min)': 15,
    '汇水面积/km²': 400,
    '排水管道承载能力': 0.83,
    '地表水排水通畅情况': 0.8,
    '地下水排水通畅情况': 0.7,
    '交通流量/(辆/天)': 6000,
    '大、重车型比例/%': 0.5,
    '最大轴重/吨': 30,
    '超限车辆比例/%': 2.8,
    '车辆超载率/%': 1.5,
    '冻土厚度/cm': 150,
    '年平均地温/℃': 3,
    '冻土上限/m': 1.2,
    '冻土含冰率/%': 35,
    '冻胀率/%': 8
}

# 二级指标权重（根据之前表格数据）
secondary_weights = {
    '地基指标': {
        '地基承载力/kn/m²': 0.193,
        '路面平整度/(mm/km)': 0.191,
        '路面破损率': 0.184,
        '路面结构强度系数': 0.129,
        '路面车辙深度/mm': 0.162,
        '路面抗滑性能指数': 0.141
    },
    '路基指标': {
        '路基高度合理性': 0.127,
        '路基宽度/m': 0.232,
        '路基压实度/%': 0.235,
        '路基回弹模量/MPa': 0.106,
        '路基边坡稳定系数': 0.106,
        '粒径级配': 0.104,
        '路基含水率': 0.091
    },
    '路基排水': {
        '降雨量/mm': 0.204,
        '降雨强度/(mm/min)': 0.202,
        '汇水面积/km²': 0.094,
        '排水管道承载能力': 0.099,
        '地表水排水通畅情况': 0.202,
        '地下水排水通畅情况': 0.199
    },
    '交通荷载': {
        '交通流量/(辆/天)': 0.129,
        '大、重车型比例/%': 0.311,
        '最大轴重/吨': 0.317,
        '超限车辆比例/%': 0.123,
        '车辆超载率/%': 0.120
    },
    '季节性冻土特征': {
        '冻土厚度/cm': 0.309,
        '年平均地温/℃': 0.124,
        '冻土上限/m': 0.312,
        '冻土含冰率/%': 0.121,
        '冻胀率/%': 0.133
    }
}

# 一级指标权重（根据之前表格数据）
primary_weights = {
    '地基指标': 0.242,
    '路基指标': 0.242,
    '路基排水': 0.182,
    '交通荷载': 0.212,
    '季节性冻土特征': 0.152
}

# 计算各二级指标与各等级的关联度
secondary_relations = {}
for indicator, value in evaluation_objects.items():
    relations = []
    for interval in classical_domains[indicator]:
        relation = K(value, interval, section_domains[indicator])
        relations.append(relation)
    secondary_relations[indicator] = relations

# 计算各一级指标的综合关联度
primary_relations = {}
for primary_indicator, secondary_indicators in secondary_weights.items():
    total_relations = [0] * 5
    for secondary_indicator, weight in secondary_indicators.items():
        for i in range(5):
            total_relations[i] += weight * secondary_relations[secondary_indicator][i]
    primary_relations[primary_indicator] = total_relations

# 计算整体综合关联度
overall_relations = [0] * 5
for primary_indicator, weight in primary_weights.items():
    for i in range(5):
        overall_relations[i] += weight * primary_relations[primary_indicator][i]

# 确定风险等级
overall_level = np.argmax(overall_relations) + 1
level_descriptions = {
    1: "差",
    2: "次",
    3: "中",
    4: "良",
    5: "优"
}
print(f"路基安全与品质整体评估等级为: {level_descriptions[overall_level]}（{overall_level} 级）")

# 输出一级指标和目标层关于各等级的综合关联度到 Excel 表
level_columns = [f"{level_descriptions[i + 1]}（{i + 1} 级）" for i in range(5)]

# 处理一级指标
primary_data = {
    '指标类型': ['一级指标'] * len(primary_relations),
    '指标名称': list(primary_relations.keys()),
    **{col: [relations[i] for relations in primary_relations.values()] for i, col in enumerate(level_columns)}
}
primary_df = pd.DataFrame(primary_data)

# 处理目标层
target_data = {
    '指标类型': ['目标层'],
    '指标名称': ['路基安全与品质'],
    **{col: [overall_relations[i]] for i, col in enumerate(level_columns)}
}
target_df = pd.DataFrame(target_data)

# 合并数据
combined_df = pd.concat([primary_df, target_df], ignore_index=True)

# 保存到 Excel 文件
combined_df.to_excel('指标关联度.xlsx', index=False)
print("一级指标和目标层关于各等级的综合关联度已保存到 '指标关联度.xlsx' 文件中。")
